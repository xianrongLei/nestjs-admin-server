generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//组织
model Organ {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sort         Int          @default(0)
  state        Int          @default(1)
  creator      String?
  updater      String?
  name         String
  description  String?
  users        User[]       @relation("OrganToUser")
  posts        Post[]
  roles        Role[]
  departments  Department[]
  Dictionary   Dictionary   @relation(fields: [dictionaryId], references: [id])
  dictionaryId String

  @@map("organs")
}

// 部门
model Department {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  creator      String?
  updater      String?
  sort         Int          @default(0)
  state        Int          @default(1)
  name         String
  description  String?
  departmentId String?
  Organ        Organ?       @relation(fields: [organId], references: [id])
  organId      String?
  parent       Department?  @relation("departments", fields: [parentId], references: [id])
  parentId     String?
  children     Department[] @relation("departments")

  @@map("departments")
}

//用户
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   String?
  updater   String?
  sort      Int      @default(0)
  state     Int      @default(1)
  username  String   @unique
  password  String
  email     String?
  nickname  String?
  age       Int?
  sex       Int      @default(1)
  admin     Int      @default(0)
  avatar    String?
  phone     String?
  organs    Organ[]  @relation("OrganToUser")
  posts     Post[]   @relation("PostToUser")
  Role      Role     @relation("RoleToUser", fields: [roleId], references: [id])
  roleId    String

  @@map("users")
}

//菜单
model Menu {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  sort        Int      @default(0)
  state       Int      @default(1)
  name        String
  description String?
  icon        String?
  type        Int      @default(0)
  route       String?
  outside     Boolean  @default(false)
  title       String?
  roles       Role[]   @relation("MenuToRole")
  parent      Menu?    @relation("menus", fields: [parentId], references: [id])
  parentId    String?
  children    Menu[]   @relation("menus")

  @@map("menus")
}

// 岗位
model Post {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  sort        Int      @default(0)
  state       Int      @default(1)
  name        String
  description String?
  users       User[]   @relation("PostToUser")
  Organ       Organ?   @relation(fields: [organId], references: [id])
  organId     String?

  @@map("posts")
}

// 角色
model Role {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  sort        Int      @default(0)
  state       Int      @default(1)
  name        String
  description String?
  menus       Menu[]   @relation("MenuToRole")
  users       User[]   @relation("RoleToUser")
  Organ       Organ?   @relation(fields: [organId], references: [id])
  organId     String?

  @@map("roles")
}

//字典
model Dictionary {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creator     String?
  updater     String?
  sort        Int         @default(0)
  state       Int         @default(1)
  dictName    String      @unique
  name        String
  notes       String
  dictEntries DictEntry[]
  Organ       Organ[]

  @@map("dictionaries")
}

//词条
model DictEntry {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  creator      String?
  updater      String?
  sort         Int        @default(0)
  state        Int        @default(1)
  term         String
  definition   String
  Dictionary   Dictionary @relation(fields: [dictionaryId], references: [id])
  dictionaryId String

  @@map("dict_entries")
}
