generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organ {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sort        Int          @default(0)
  state       Int          @default(1)
  creator     String?
  updater     String?
  name        String
  description String?
  uniqueName  String       @unique
  creatorName String?
  updaterName String?
  departments Department[]
  posts       Post[]
  roles       Role[]
  Dictionary  Dictionary[] @relation("DictionaryToOrgan")
  users       User[]       @relation("OrganToUser")

  @@map("organs")
}

model Department {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     String?
  updater     String?
  sort        Int          @default(0)
  state       Int          @default(1)
  name        String
  description String?
  organId     String?
  parentId    String?
  creatorName String?
  updaterName String?
  Organ       Organ?       @relation(fields: [organId], references: [id])
  parent      Department?  @relation("departments", fields: [parentId], references: [id])
  children    Department[] @relation("departments")

  @@map("departments")
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  username    String   @unique
  password    String
  email       String?
  nickname    String?
  phone       String?
  age         Int?
  sex         Int      @default(1)
  admin       Int      @default(0)
  avatar      String?
  sort        Int      @default(0)
  state       Int      @default(1)
  roleId      String?
  creatorName String?
  updaterName String?
  Role        Role?    @relation("RoleToUser", fields: [roleId], references: [id])
  organs      Organ[]  @relation("OrganToUser")
  posts       Post[]   @relation("PostToUser")

  @@map("users")
}

model Menu {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  sort        Int      @default(0)
  state       Int      @default(1)
  name        String   @unique
  description String?
  icon        String?
  type        Int      @default(0)
  route       String?
  outside     Boolean  @default(false)
  title       String?
  parentId    String?
  component   String?
  creatorName String?
  updaterName String?
  isCache     Boolean? @default(true)
  isHidden    Boolean? @default(false)
  parent      Menu?    @relation("menus", fields: [parentId], references: [id])
  children    Menu[]   @relation("menus")
  roles       Role[]   @relation("MenuToRole")

  @@map("menus")
}

model Post {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  sort        Int      @default(0)
  state       Int      @default(1)
  name        String
  description String?
  organId     String?
  creatorName String?
  updaterName String?
  Organ       Organ?   @relation(fields: [organId], references: [id])
  users       User[]   @relation("PostToUser")

  @@map("posts")
}

model Role {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     String?
  updater     String?
  sort        Int      @default(0)
  state       Int      @default(1)
  name        String
  description String?
  organId     String?
  creatorName String?
  updaterName String?
  Organ       Organ?   @relation(fields: [organId], references: [id])
  users       User[]   @relation("RoleToUser")
  menus       Menu[]   @relation("MenuToRole")

  @@map("roles")
}

model Dictionary {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creator     String?
  updater     String?
  sort        Int         @default(0)
  state       Int         @default(1)
  dictName    String      @unique
  name        String
  description String?
  creatorName String?
  updaterName String?
  dictEntries DictEntry[]
  Organ       Organ[]     @relation("DictionaryToOrgan")

  @@map("dictionaries")
}

model DictEntry {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  creator      String?
  updater      String?
  sort         Int         @default(0)
  state        Int         @default(1)
  name         String
  dictionaryId String?
  value        String
  description  String?
  creatorName  String?
  updaterName  String?
  Dictionary   Dictionary? @relation(fields: [dictionaryId], references: [id])

  @@map("dict_entries")
}
