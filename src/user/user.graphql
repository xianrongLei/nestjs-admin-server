type User {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  username: String
  password: String
  email: String
  nickname: String
  phone: String
  age: Int
  sex: Int
  admin: Int
  avatar: String
  sort: Int
  state: Int
  roleId: ID
  creatorName: String
  updaterName: String
  Role: Role
  organs: [Organ]
  posts: [Post]
}

input CreateUserInput {
  username: String
  password: String
  email: String
  nickname: String
  phone: String
  age: Int
  sex: Int
  admin: Int
  avatar: String
  sort: Int
  state: Int
  roleId: ID
  creatorName: String
  updaterName: String
  organsIds: [ID]
  postsIds: [ID]
}

input UpdateUserInput {
  id: ID
  username: String
  password: String
  email: String
  nickname: String
  phone: String
  age: Int
  sex: Int
  admin: Int
  avatar: String
  sort: Int
  state: Int
  roleId: ID
  creatorName: String
  updaterName: String
  organsIds: [ID]
  postsIds: [ID]
}

enum UserOrderFelid {
  id
  createdAt
  updatedAt
  creator
  updater
  username
  password
  email
  nickname
  phone
  age
  sex
  admin
  avatar
  sort
  state
  roleId
  creatorName
  updaterName
}

input UserOrderBy {
  field: UserOrderFelid
  direction: OrderDirection
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

input UserQuery {
  creator: ID
  updater: ID
  username: String
  password: String
  nickname: String
  email: String
  phone: String
  sex: Int
  age: Int
  admin: Int
  organId: ID
  state: Int
}

input QueryUsersInput {
  orderBy: UserOrderBy
  after: String
  before: String
  first: Int
  last: Int
  query: UserQuery
  skip: Int
}

type Query {
  users(QueryUsersInput: QueryUsersInput): UserConnection!
  user(id: ID!): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): User
}
