type Menu {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  name: String
  route: String
  description: String
  icon: String
  title: String
  sort: Int
  state: Int
  type: Int
  outside: Boolean
  authNames: [String]
  parentId: ID
}

input CreateMenuInput {
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  name: String
  route: String
  description: String
  icon: String
  title: String
  sort: Int
  state: Int
  type: Int
  outside: Boolean
  authNames: [String]
  parentId: ID
}

input UpdateMenuInput {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  name: String
  route: String
  description: String
  icon: String
  title: String
  sort: Int
  state: Int
  type: Int
  outside: Boolean
  authNames: [String]
  parentId: ID
}

enum OrderDirection {
  asc
  desc
}

enum OrderFild {
  id
  createdAt
  updatedAt
  creator
  updater
  username
  nickname
  email
  phone
  sex
  age
  admin
  avatar
  organId
  state
}

input MenuOrderBy {
  field: OrderFild
  direction: OrderDirection
}

type MenuConnection {
  edges: [MenuEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MenuEdge {
  cursor: String!
  node: Menu!
}

input MenuQuery {
  creator: ID
  updater: ID
  username: String
  password: String
  nickname: String
  email: String
  phone: String
  sex: Int
  age: Int
  admin: Int
  organId: ID
  state: Int
}

type Query {
  menus(
    orderBy: UserOrderBy
    after: String
    before: String
    first: Int
    last: Int
    query: UserQuery
    skip: Int
  ): MenuConnection!
  menu(id: ID!): Menu
}

type Mutation {
  createMenu(createMenuInput: CreateMenuInput!): Menu!
  updateMenu(updateMenuInput: UpdateMenuInput!): Menu!
  removeMenu(id: ID!): Menu
}
