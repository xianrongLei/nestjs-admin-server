type Menu {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  sort: Int
  state: Int
  name: String
  description: String
  route: String
  icon: String
  title: String
  type: Int
  componentUrl: String
  outside: Boolean
  isCache: Boolean
  parentId: ID
  parent: Menu
  children: [Menu]
  roles: [Role]
}

input CreateMenuInput {
  sort: Int
  state: Int
  name: String
  description: String
  route: String
  icon: String
  title: String
  type: Int
  componentUrl: String
  outside: Boolean
  isCache: Boolean
  parentId: ID
  childrenIds: [ID]
  rolesIds: [ID]
}

input UpdateMenuInput {
  id: ID
  sort: Int
  state: Int
  name: String
  description: String
  route: String
  icon: String
  title: String
  type: Int
  componentUrl: String
  outside: Boolean
  isCache: Boolean
  parentId: ID
  childrenIds: [ID]
  rolesIds: [ID]
}

enum MenuOrderFelid {
  id
  createdAt
  updatedAt
  creator
  creatorName
  updater
  updaterName
  sort
  state
  name
  description
  route
  icon
  title
  type
  componentUrl
  outside
  parentId
}

input MenuOrderBy {
  field: MenuOrderFelid
  direction: OrderDirection
}

input MenuQuery {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  creatorName: String
  updaterName: String
  creator: ID
  updater: ID
  sort: Int
  state: Int
  name: String
  description: String
  route: String
  icon: String
  title: String
  type: Int
  componentUrl: String
  outside: Boolean
  isCache: Boolean
  parentId: ID
}

input QueryMenuInput {
  orderBy: MenuOrderBy
  query: MenuQuery
  after: String
  before: String
  first: Int
  last: Int
  skip: Int
}

type MenuEdge {
  cursor: String!
  node: Menu!
}

type MenuConnection {
  edges: [MenuEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  menus(queryMenuInput: QueryMenuInput): MenuConnection!
  menusByUserId(userId: ID!): [Menu]
  menu(id: ID!): Menu
}

type Mutation {
  createMenu(createMenuInput: CreateMenuInput!): Menu!
  updateMenu(updateMenuInput: UpdateMenuInput!): Menu!
  removeMenu(id: ID!): Menu
}
