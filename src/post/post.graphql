type Post {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  sort: Int
  state: Int
  name: ID
  description: String
  organId: ID
  creatorName: String
  updaterName: String
  Organ: Organ
  users: [User]
}

input CreatePostInput {
  sort: Int
  state: Int
  name: String
  description: String
  organId: ID
  users: [ID]
}

input UpdatePostInput {
  id: ID
  sort: Int
  state: Int
  name: String
  description: String
  organId: ID
  users: [ID]
}

enum PostOrderFelid {
  id
  createdAt
  updatedAt
  creator
  updater
  sort
  state
  name
  description
  organId
  creatorName
  updaterName
}

input PostOrderBy {
  field: PostOrderFelid
  direction: OrderDirection
}

input PostQuery {
  createdAt: DateTime
  updatedAt: DateTime
  creator: ID
  updater: ID
  sort: Int
  state: Int
  name: String
  description: String
  organId: String
  creatorName: String
  updaterName: String
}

input QueryPostInput {
  orderBy: PostOrderBy
  after: String
  before: String
  first: Int
  last: Int
  query: PostQuery
  skip: Int
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

type Query {
  posts(queryPostInput: QueryPostInput): PostConnection!
  postsById(ids: [ID]): [Post]
  post(id: ID!): Post
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(id: ID!): Post
}
